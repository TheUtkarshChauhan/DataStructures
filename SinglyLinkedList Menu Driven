#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
// display function for transversal of LL data
struct Node* LLdisplay(struct Node * ptr)
{
    
    while (ptr != NULL)
    {
        printf("%d  ->", ptr->data);
        ptr = ptr->next;
    }
    
}
// All inserion operation are listed here
// Case 1 Insertion at the beginning
struct Node * insertathead(struct Node * head, int data)
{
    struct Node* ptr;
    ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->next = head;
    ptr->data = data;
    return ptr;
}
// case 2 Insertion at end 
struct Node* insertatend(struct Node* head,int data)
{
    struct Node* ptr;
    ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node* p = head;
    while (p->next != NULL)
    {
        p = p->next;
    }
    p->next = ptr;
    ptr->next = NULL;
    return head;
}
// case 3 Insertion at the middle 
struct Node *insertatmid(struct Node * head, int data)
{
    struct Node*ptr;
    ptr = (struct Node*)malloc(sizeof(struct Node));
    ptr->data = data;
    struct Node * p = head;
    struct Node * q = head;
    struct Node* temp = head->next;
    int count = 0;
    while (p!=NULL)
    {
        p=p->next;
        count++;
    }
    printf("Total No of nodes: %d\n", count);
    for (int i = 0; i < (count/2)-1; i++)
    {
        q = q->next;
        temp = temp->next;
    }
    q->next = ptr;
    ptr->next = temp;
    return head;
}
// Deletion operation are listed below 
// Case 1 Deletion from front 
struct Node * deletefromfront(struct Node * head)
{
    struct Node* ptr = head;
    head = head->next;
    free(ptr);
    return head;
}
//case 2 Deletion from End 
struct Node * deletefromend(struct Node * head)
{
    struct Node* ptr = head;
    struct Node *q = head->next;
    while (q->next != NULL)
    {
        ptr=ptr->next;
        q = q->next;
    }
    ptr->next = q->next;
    free(q);
    return head;
}
// case 3 Deletion from middle 
struct Node * deletefrommiddle(struct Node * head)
{
    struct Node* ptr = head;
    struct Node * q= head->next;
    struct Node * p = head;
    int count = 0;
    while (p!=NULL)
    {
        p=p->next;
        count++;
    }
    for (int i = 0; i < (count/2)-1; i++)
    {
        ptr = ptr->next;
        q=q->next;
    }
    ptr->next = q->next;
    free(q);
    return head;
}
int main()
{
    int value;
    int condition =0;
    struct Node *head;
    head = (struct Node *)malloc(sizeof(struct Node));
    printf("***************************************");
    printf("\n");
    int choice;
    int subchoice;
    printf("***************MENU****************\n");
        printf("Enter (1) for initializing linked list:\n");
        printf("Enter (2) for insering elements in linked list:\n");
        printf("Enter (3) for deleting elements from linked list:\n");
        printf("Enter (4) for Displaying elements in linked list:\n");
        printf("Enter (5) for Exit\n");
    do
    {
        printf("\nEnter MENU choice :: ");
        scanf("%d",&choice);
        switch (choice)
        {
            case 1:
                  printf("Enter the Data for the first Node");
                  scanf("%d",&(head->data));
                  head->next = NULL;
                  while (value!=-1)
                  {
                      printf("\nEnter the New Node data");
                      scanf("%d",&value);
                      head = insertatend(head,value);
                      printf("\nEnter -1 to exit:");
                      scanf("%d",&value);
                  }
                  
                  break;
            case 2:
                
                  printf("Enter (1) for Insertion at the front:\n");
                  printf("Enter (2) for Insertion at the end:\n");
                  printf("Enter (3) for Insertion at the middle:\n");
                  printf("Enter the SubChoice for insertion");
                  scanf("%d",&subchoice);
                  printf("Enter the New Node data");
                  scanf("%d",&value);
                  if (subchoice==1)
                  {
                      head = insertathead(head,value);
                  }
                  else if (subchoice == 2)
                  {
                      head = insertatend(head,value);
                  }
                  else
                  {
                      head = insertatmid(head,value);
                  }
                  break;
            case 3:
                printf("Enter (1) for deletion at the front\n:");
                printf("Enter (2) for deletion at the end\n:");
                printf("Enter (3) for deletion at the middle:\n");
                printf("Enter the SubChoice for insertion\n");
                scanf("%d",&subchoice);
                if (subchoice==1)
                {
                    head = deletefromfront(head);
                    printf("Element Deleted\n");
                }
                else if (subchoice == 2)
                {
                    head = deletefromend(head);
                    printf("Element Deleted\n");
                }
                else if (subchoice==3)
                {
                    head =deletefrommiddle(head);
                    printf("Element Deleted\n");
                }
                break;
                
            case 4:
                
                LLdisplay(head);
                break; 
            case 5:
                exit (0);
                break;
            default:
            printf("All operations are completed");
            break;
        }
        
        printf("\n");
        printf("Enter 1 to exit the menu:");
        scanf("%d",&condition);
    } while (condition !=1);
    

    return 0;
}
